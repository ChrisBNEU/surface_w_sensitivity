[NbConvertApp] Converting notebook copyme.ipynb to notebook
[NbConvertApp] Executing notebook with kernel: python2
[IPKernelApp] ERROR | Failed to create history session in /home/mazeau.e/.ipython/profile_default/history.sqlite. History will not be saved.
Traceback (most recent call last):
  File "/home/mazeau.e/anaconda2/envs/rmg_env3/lib/python2.7/site-packages/IPython/core/history.py", line 549, in __init__
    self.new_session()
  File "<decorator-gen-22>", line 2, in new_session
  File "/home/mazeau.e/anaconda2/envs/rmg_env3/lib/python2.7/site-packages/IPython/core/history.py", line 60, in needs_sqlite
    return f(self, *a, **kw)
  File "/home/mazeau.e/anaconda2/envs/rmg_env3/lib/python2.7/site-packages/IPython/core/history.py", line 575, in new_session
    NULL, "") """, (datetime.datetime.now(),))
OperationalError: database is locked
[NbConvertApp] ERROR | Error while converting 'copyme.ipynb'
Traceback (most recent call last):
  File "/home/mazeau.e/anaconda2/envs/rmg_env3/lib/python2.7/site-packages/nbconvert/nbconvertapp.py", line 393, in export_single_notebook
    output, resources = self.exporter.from_filename(notebook_filename, resources=resources)
  File "/home/mazeau.e/anaconda2/envs/rmg_env3/lib/python2.7/site-packages/nbconvert/exporters/exporter.py", line 174, in from_filename
    return self.from_file(f, resources=resources, **kw)
  File "/home/mazeau.e/anaconda2/envs/rmg_env3/lib/python2.7/site-packages/nbconvert/exporters/exporter.py", line 192, in from_file
    return self.from_notebook_node(nbformat.read(file_stream, as_version=4), resources=resources, **kw)
  File "/home/mazeau.e/anaconda2/envs/rmg_env3/lib/python2.7/site-packages/nbconvert/exporters/notebook.py", line 31, in from_notebook_node
    nb_copy, resources = super(NotebookExporter, self).from_notebook_node(nb, resources, **kw)
  File "/home/mazeau.e/anaconda2/envs/rmg_env3/lib/python2.7/site-packages/nbconvert/exporters/exporter.py", line 134, in from_notebook_node
    nb_copy, resources = self._preprocess(nb_copy, resources)
  File "/home/mazeau.e/anaconda2/envs/rmg_env3/lib/python2.7/site-packages/nbconvert/exporters/exporter.py", line 311, in _preprocess
    nbc, resc = preprocessor(nbc, resc)
  File "/home/mazeau.e/anaconda2/envs/rmg_env3/lib/python2.7/site-packages/nbconvert/preprocessors/base.py", line 47, in __call__
    return self.preprocess(nb, resources)
  File "/home/mazeau.e/anaconda2/envs/rmg_env3/lib/python2.7/site-packages/nbconvert/preprocessors/execute.py", line 262, in preprocess
    nb, resources = super(ExecutePreprocessor, self).preprocess(nb, resources)
  File "/home/mazeau.e/anaconda2/envs/rmg_env3/lib/python2.7/site-packages/nbconvert/preprocessors/base.py", line 69, in preprocess
    nb.cells[index], resources = self.preprocess_cell(cell, resources, index)
  File "/home/mazeau.e/anaconda2/envs/rmg_env3/lib/python2.7/site-packages/nbconvert/preprocessors/execute.py", line 286, in preprocess_cell
    raise CellExecutionError.from_cell_and_msg(cell, out)
CellExecutionError: An error occurred while executing the following cell:
------------------
# finding exit conversions
end_temp = []
ch4_conv = []
o2_conv = []
co_sel = []
h2_sel = []
h2o_sel = []
ratios_real = []
for r in data:
#     gas_out,gas_names,dist_array,T_array = r[1]
    for x in range(len(r[1][1])):
        if r[1][1][x]=='CH4(2)':
            ch4_in = r[1][0][0][x]
            ch4_out = r[1][0][-1][x]
            if ch4_out < 0:
                ch4_out = 0.
            elif ch4_out > ch4_in:
                ch4_out = ch4_in
            conv = (ch4_in-ch4_out)/ch4_in
            if conv < 0:
                ch4_conv.append(1e-15)
            else:
                ch4_conv.append(conv)
        if r[1][1][x]=='O2(3)':
            o2_in = r[1][0][0][x]
            o2_out = r[1][0][-1][x]
            if o2_out < 0:
                o2_out = 0.
            elif o2_out > o2_in:
                o2_out = o2_in
            conv = (o2_in-o2_out)/o2_in
            if conv < 0:
                o2_conv.append(1e-15)
            else:
                o2_conv.append(conv)
    ratios_real.append(ch4_in/(2*o2_in))
    end_temp.append(r[1][3][-1])
    
    for x in range(len(r[1][1])):
        if r[1][1][x]=='Ar':
            ar = r[1][0][-1][x]
        if r[1][1][x]=='CO(7)':
            co_out = r[1][0][-1][x]
            co_sel.append(co_out/(1-ch4_out-o2_out-ar))
        if r[1][1][x]=='H2O(5)':
            h2o_out = r[1][0][-1][x]
            h2o_sel.append(h2o_out/(1-ch4_out-o2_out-ar))
        if r[1][1][x]=='H2(6)':
            h2_out = r[1][0][-1][x]
            h2_sel.append(h2_out/(1-ch4_out-o2_out-ar))
        
#     ratios.append(r[0])

# write this metal data to a csv file for later use in the lsr volcano plot

output = []
for x in range(len(ratios_real)):
    output.append([ratios_real[x],ch4_conv[x],o2_conv[x],co_sel[x],h2_sel[x],h2o_sel[x]])
# todo: some sort of check/something to output to know that all ratios were sucessfully run
k = (pd.DataFrame.from_dict(data=output, orient='columns'))
k.columns = ['C/O ratio','CH4 Conv','O2 Conv','CO Selec','H2 Selec','H2O Selec']
k.to_csv('dict_conversions_selectivities.csv', header=True)

# def export(rxns_translated,ratio,sens_vals,sens_type=1):
#     answer = dict(zip(rxns_translated, sens_vals))
#     sorted_answer = sorted(answer.items(), key=operator.itemgetter(1), reverse=False)
#     # for x in sorted_answer:
#     #     print '%s %.4f'%(x)
    
#     # write to csv file
#     (pd.DataFrame.from_dict(data=sorted_answer, orient='columns')
#     .to_csv('dict_{}ratio_{}.csv'.format(ratio,sens_type), header=False))


fig, axs = plt.subplots(1,2)
# plot exit conversion and temp
axs[0].plot(ratios_real, ch4_conv,'bo-', label='CH4', color='green')
axs[0].plot(ratios_real, o2_conv, 'bo-',label='O2', color='blue')
ax2 = axs[0].twinx()
ax2.plot(ratios_real, end_temp, 'bo-',label='temp', color = 'red')
ax2.set_ylim(600.0,2000)

# plot exit selectivities
axs[1].plot(ratios_real, h2o_sel, 'bo-',label='H2O', color ='pink')
axs[1].plot(ratios_real, co_sel, 'bo-',label='CO', color ='purple')
axs[1].plot(ratios_real, h2_sel, 'bo-',label='H2', color ='orange')

axs[0].legend()
axs[1].legend()
axs[0].set_ylabel('Exit conversion (%)', fontsize=13);
ax2.set_ylabel('Exit temperature (K)', fontsize=13)
axs[0].set_xlabel('C/O Ratio', fontsize=13);
axs[1].set_ylabel('Exit selectivity (%)', fontsize=13)
axs[1].set_xlabel('C/O Ratio', fontsize=13)
plt.tight_layout()
fig.set_figheight(6)
fig.set_figwidth(16)
fig.savefig('conversion&selectivity.png', bbox_inches='tight')
------------------

[0;31m[0m
[0;31mValueError[0mTraceback (most recent call last)
[0;32m<ipython-input-6-3f0bf9978478>[0m in [0;36m<module>[0;34m()[0m
[1;32m     59[0m [0;31m# todo: some sort of check/something to output to know that all ratios were sucessfully run[0m[0;34m[0m[0;34m[0m[0m
[1;32m     60[0m [0mk[0m [0;34m=[0m [0;34m([0m[0mpd[0m[0;34m.[0m[0mDataFrame[0m[0;34m.[0m[0mfrom_dict[0m[0;34m([0m[0mdata[0m[0;34m=[0m[0moutput[0m[0;34m,[0m [0morient[0m[0;34m=[0m[0;34m'columns'[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0m
[0;32m---> 61[0;31m [0mk[0m[0;34m.[0m[0mcolumns[0m [0;34m=[0m [0;34m[[0m[0;34m'C/O ratio'[0m[0;34m,[0m[0;34m'CH4 Conv'[0m[0;34m,[0m[0;34m'O2 Conv'[0m[0;34m,[0m[0;34m'CO Selec'[0m[0;34m,[0m[0;34m'H2 Selec'[0m[0;34m,[0m[0;34m'H2O Selec'[0m[0;34m][0m[0;34m[0m[0m
[0m[1;32m     62[0m [0mk[0m[0;34m.[0m[0mto_csv[0m[0;34m([0m[0;34m'dict_conversions_selectivities.csv'[0m[0;34m,[0m [0mheader[0m[0;34m=[0m[0mTrue[0m[0;34m)[0m[0;34m[0m[0m
[1;32m     63[0m [0;34m[0m[0m

[0;32m/home/mazeau.e/anaconda2/envs/rmg_env3/lib/python2.7/site-packages/pandas/core/generic.pyc[0m in [0;36m__setattr__[0;34m(self, name, value)[0m
[1;32m   4387[0m         [0;32mtry[0m[0;34m:[0m[0;34m[0m[0m
[1;32m   4388[0m             [0mobject[0m[0;34m.[0m[0m__getattribute__[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mname[0m[0;34m)[0m[0;34m[0m[0m
[0;32m-> 4389[0;31m             [0;32mreturn[0m [0mobject[0m[0;34m.[0m[0m__setattr__[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mname[0m[0;34m,[0m [0mvalue[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   4390[0m         [0;32mexcept[0m [0mAttributeError[0m[0;34m:[0m[0;34m[0m[0m
[1;32m   4391[0m             [0;32mpass[0m[0;34m[0m[0m

[0;32mpandas/_libs/properties.pyx[0m in [0;36mpandas._libs.properties.AxisProperty.__set__[0;34m()[0m

[0;32m/home/mazeau.e/anaconda2/envs/rmg_env3/lib/python2.7/site-packages/pandas/core/generic.pyc[0m in [0;36m_set_axis[0;34m(self, axis, labels)[0m
[1;32m    644[0m [0;34m[0m[0m
[1;32m    645[0m     [0;32mdef[0m [0m_set_axis[0m[0;34m([0m[0mself[0m[0;34m,[0m [0maxis[0m[0;34m,[0m [0mlabels[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 646[0;31m         [0mself[0m[0;34m.[0m[0m_data[0m[0;34m.[0m[0mset_axis[0m[0;34m([0m[0maxis[0m[0;34m,[0m [0mlabels[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    647[0m         [0mself[0m[0;34m.[0m[0m_clear_item_cache[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m
[1;32m    648[0m [0;34m[0m[0m

[0;32m/home/mazeau.e/anaconda2/envs/rmg_env3/lib/python2.7/site-packages/pandas/core/internals.pyc[0m in [0;36mset_axis[0;34m(self, axis, new_labels)[0m
[1;32m   3321[0m             raise ValueError(
[1;32m   3322[0m                 [0;34m'Length mismatch: Expected axis has {old} elements, new '[0m[0;34m[0m[0m
[0;32m-> 3323[0;31m                 'values have {new} elements'.format(old=old_len, new=new_len))
[0m[1;32m   3324[0m [0;34m[0m[0m
[1;32m   3325[0m         [0mself[0m[0;34m.[0m[0maxes[0m[0;34m[[0m[0maxis[0m[0;34m][0m [0;34m=[0m [0mnew_labels[0m[0;34m[0m[0m

[0;31mValueError[0m: Length mismatch: Expected axis has 0 elements, new values have 6 elements
ValueError: Length mismatch: Expected axis has 0 elements, new values have 6 elements


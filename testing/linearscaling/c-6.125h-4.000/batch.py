"""
This example is from doi:10.1021/acscatal.7b03205, Huber et al.

ethylene dimerization and oligomerization to 1 butene
"""
# load a bunch of stuff
import cantera as ct
import numpy as np
import scipy
import pylab
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
from matplotlib.pyplot import cm
from matplotlib.ticker import NullFormatter, MaxNLocator, LogLocator
plt.switch_backend('agg')  # needed for saving figures
import csv
from pydas.dassl import DASSL
import os

import re
import operator
import pandas as pd
import pylab
from cycler import cycler
import seaborn as sns
import os
import multiprocessing
import sys

# this chemkin file is from the cti generated by rmg
gas = ct.Solution('./chem_annotated.cti', 'gas')
surf = ct.Interface('./chem_annotated.cti', 'surface1', [gas])

print("This mechanism contains {} gas reactions and {} surface reactions".format(gas.n_reactions, surf.n_reactions))

i_ar = gas.species_index('Ar')
i_c2h4 = gas.species_index('C2H4(11)')
i_he = gas.species_index('He(2)')
i_c4h8 = gas.species_index('C4H8(10)') # 1 butene
# i_c4h8_2 = gas.species_index('C4H8(281)')  # trans 2 butene

# unit conversion factors to SI
mm = 0.001
cm = 0.01
ms = mm
minute = 60.0

#######################################################################
# Input Parameters
#######################################################################
t_in = 353  # K, uniform temperature profile
t_cat = t_in
cat_area_per_vol = 5.0e7  # in m-1, made up
flow_rate = 80.2 # mL/min
flow_rate = flow_rate * 1e-6 / 60  # m^3/s

def batch(gas, surf, temp, mol_in, verbose=False):
    volume = 0.3 # units?
    cat_area = cat_area_per_vol * volume
    T0 = temp
    pressure = 35  # bar
    pressure = pressure * 1e5
    P0 = pressure  # Pa
    c2h4, he = mol_in
    c2h4 = str(c2h4)
    he = str(he)
    X = str('C2H4(11):' + c2h4 + ', He(2):' + he)

    gas.TPX = temp, P0, X
    temp_cat = temp
    surf.TP = temp_cat, P0
    print surf.P
    surf.coverages = 'X(1):1.0'

    gas_names = gas.species_names
    surf_names = surf.species_names

    r = ct.IdealGasConstPressureReactor(gas, energy='off')
    r.volume = volume
    rsurf = ct.ReactorSurface(surf, r, A=cat_area)

    sim = ct.ReactorNet([r])
    sim.max_err_test_fails = 12

    # set relative and absolute tolerances on the simulation
    sim.rtol = 1.0e-12
    sim.atol = 1.0e-18

    # rxn_time = np.linspace(1E-12, 5, 10001)
    rxn_time = np.logspace(-5, 3, 1000001) #from 0s to 100s, log spacing\n",
    gas_mole_fracs = np.zeros([gas.n_species, len(rxn_time)])
    surf_site_fracs = np.zeros([surf.n_species, len(rxn_time)])
    temperature = np.zeros(len(rxn_time))
    pressure = np.zeros(len(rxn_time))

    if verbose is True:
        print('  distance(mm)   X_C2H4       X_C4H8')

    for i in range(len(rxn_time)):
        time = rxn_time[i] #define time in the reactor
        sim.advance(time) #Advance the simulation to next set time\n",
        temperature[i] = gas.T
        pressure[i] = gas.P/ct.one_atm
        gas_mole_fracs[:,i] = gas.X
        surf_site_fracs[:,i] = surf.coverages

        if verbose is True:
            if not i % 1000:
                print('  {0:10f}  {1:10f} '.format(time, *gas[
                    'C2H4(11)', 'C4H8(10)'].X))

    #Plot out simulations results
    fig = pylab.figure(dpi=300,figsize=(8,8))
    gs = gridspec.GridSpec(2, 1)
    ax0 = plt.subplot(gs[0])
    ax1 = plt.subplot(gs[1])

    y_min = 1E-4

    for i in range(gas.n_species):
        if np.max(gas_mole_fracs[i,:]) > y_min:
            ax0.loglog(rxn_time, gas_mole_fracs[i,:], label=gas.species_name(i) )

    for i in range(surf.n_species):
        if np.max(surf_site_fracs[i,:]) > y_min:
            ax1.loglog(rxn_time, surf_site_fracs[i,:], label=surf.species_name(i) )

    ax0.legend(loc='lower left', fontsize = 12)
    ax1.legend(loc='lower left', fontsize = 12)

    ax0.set_ylabel("gas-phase mole fraction")
    ax0.set_ylim(y_min,0.5)
    ax0.set_xlim(1.0E-4,max(rxn_time))
    ax1.set_xlim(1.0E-4,max(rxn_time))
    ax0.set_xlabel("Time(s)")
    ax1.set_ylabel("surface site fraction")
    #ax0.xaxis.set_major_locator(MaxNLocator(6))
    #ax0.yaxis.set_major_locator(LogLocator(base=10.0, numticks=3))
    #ax0.tick_params(axis='both', which='major', labelsize=10)
    ax1.set_ylim(y_min, 1.1 )
    ax1.set_xlabel("Time(s)")
    fig.savefig('./batch.pdf', bbox_inches='tight')

    return gas_mole_fracs, surf_site_fracs, gas_names, surf_names, rxn_time, temperature


f_ethylene = 34.8/(34.8+45.4)
f_he = 1-f_ethylene
ratio_in = [f_ethylene, f_he]

a = batch(gas, surf, t_in, ratio_in, verbose=True)
gas_out, surf_out, gas_names, surf_names, rxn_time, T_array = a
